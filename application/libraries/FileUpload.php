<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed'); 

/**
 * CodeIgniter
 *
 * An open source application development framework for PHP 5.1.6 or newer
 *
 * @package		CodeIgniter
 * @author		ExpressionEngine Dev Team
 * @copyright	Copyright (c) 2008 - 2011, EllisLab, Inc.
 * @license		http://codeigniter.com/user_guide/license.html
 * @link		http://codeigniter.com
 * @since		Version 2.1
 * @filesource
 */

// ------------------------------------------------------------------------

/**
 * Used for file operations on server side
 *
 * @package		CodeIgniter
 * @subpackage	Libraries
 * @author		Gatelogix (Sajjad Mahmood)
 */
 
class FileUpload {
	/**
	 * filename that is being uploaded to the server
	 *
	 * @var string
	 */
	protected $mFileName;
	
	protected $mFilePointer;
	/**
	 * destination to which the file is being moved on the server
	 *
	 * @var string
	 */
	protected $mDestination;
	/**
	 * result returned by the move_uploaed_file
	 *
	 * @var Object
	 */
	protected $mResult;
	/**
	 * file array, holds the file array uploaded from the client side
	 * this array will hold file attributes of file like size, name, tmp name and type
	 * @var string
	 */
	protected $mFile; 
	/**
	 * tempraroy filename generated by php, and which is being moved/uploaded to another position
	 *
	 * @var string
	 */
	protected $mTempName;
	/**
	 * path to which the file is going to be uploaded to
	 *
	 * @var string
	 */
	protected $mPath;
	/**
	 * size in bytes of the uploaded file
	 *
	 * @var integer
	 */
	protected $mSize;
	/**
	 * MIME type of the file that is uploaded from the client/user end
	 *
	 * @var string
	 */
	protected $mType;
	/**
	 * extension of the file being uploaded
	 *
	 * @var unknown_type
	 */
	protected $mExtension;
	
	/**
	 * constructor of the class
	 *
	 */
	public function __construct(){
		
	}
	/**
	 * creates a file object for file to be uploaded
	 *
	 * @param array $file
	 */
	public function doInitialize($file){
		$this->mFile = array();
		$this->mFile = $file;
		$this->mTempName = $this->mFile['tmp_name'];
		$this->mFileName = $this->mFile['name'];
		$this->mSize = $this->mFile['size'];
		$this->mType = $this->mFile['type'];
	}
	/**
	 * Gets the file size being uploaded in bytes
	 *
	 * @return integer size
	 */
	public function getSize(){
		return $this->mSize;
	}
	/**
	 * Gets the temporary name generated by php of the file being uploaded.
	 *
	 * @return unknown
	 */
	public function getTempName(){
		return $this->mTempName;
	}
	/**
	 * Sets the filename which is to be saved on server
	 *
	 * @param string $filename
	 */
	public function setName( $filename ){
		$this->mFileName = $filename;
	}
	/**
	 * Gets the filename that is just uploaded to the server
	 *
	 * @return string $filename
	 */
	public function getName(){
		 return $this->mFileName;
	}
	/**
	 * Gets the MIME type, being upload to the server
	 *
	 * @return unknown
	 */
	public function getType(){
		return $this->mType;
	}
	/**
	 * Gets the system path of the file uploaded to
	 *
	 * @return string $path
	 */
	public function getPath(){
		return $this->mPath;
	}
	
	public function getFullPath(){
		return $this->getPath();
	}
	/**
	 * Gets the extension of the file that is being uploaded to the server
	 *
	 * @return string extension
	 */
	public function getExtension(){
		$filename = $this->getName();
		$lastpos = strpos($filename,".");
		$ext = substr($filename,$lastpos + 1);	
		return ".".$this->mExtension = $ext;
	}
	/**
	 * Uploads the file from the Browser to the server
	 *
	 * @param string $path
	 * @throws FileNotFoundException
	 * @throws FilePermissionException
	 */
	public function saveAs( $path ){
		if(!file_exists($path)){
			throw new FileNotFoundException("Directory <strong>$path</strong> does not exists.");
		}
		elseif(!is_writable($path)){
			throw new FilePermissionException("Permission denied in <strong>$path</strong>",0,$path);
		}
		else{
			$this->mPath = $path.$this->mFileName;
			if(!@move_uploaded_file( $this->mTempName,$this->mPath)){
				throw new FileNotFoundException();
			}
		}
		
	}
	public function move( $src, $dest ){
		
		$this->mResult = rename( $src, $dest );
		if( !$this->mResult ){
			throw new Exception("Error#".mysql_errno()."::".mysql_error());
		}
	}
	public function _copy( $src, $dest ){
		$this->mResult = copy( $src, $dest );
		if( !$this->mResult ){
			throw new Exception("Error#".mysql_errno()."::".mysql_error());
		}
	}
	public function delete( $filename ){		
		//$this->mResult = unlink( $filename );
		if( !unlink( $filename ) ){
			throw new FileNotFoundException();
		}
	}

	
}
?>